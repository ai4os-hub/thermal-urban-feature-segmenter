format_version = 2
  app_script = "train_UNet_splitted.py"
  app_config = "--channels=4 --processing=basic"
  N = 4 #Number of input channels=3 or 4
executors = [
  {
    # tasks the executors are defined to handle
    tasks = [
      "train",
    ]
    executor {
      id = "Executor"
      # Executor name : PTClientAPILauncherExecutor
      # This is an executor for pytorch + Client API. The underline data exchange is using Pipe.
      path = "nvflare.app_common.executors.client_api_launcher_executor.ClientAPILauncherExecutor"
      args {
     launcher_id = "launcher"
          pipe_id = "pipe"
          heartbeat_timeout = 6000
          params_exchange_format = "numpy"
          params_transfer_type = "DIFF"
          train_with_evaluation = False
          from_nvflare_converter_id = "from_nvflare"
          to_nvflare_converter_id = "to_nvflare"
      }
    }
  }
  {
    # All tasks prefixed with swarm_ are routed to SwarmClientController
    tasks = ["swarm_*"]
    executor {
      # client-side controller for training and logic and aggregation management
      path = "nvflare.app_common.ccwf.SwarmClientController"
      args {
        # train task must be implemented by Executor
        learn_task_name = "train"
        # how long to wait for current learn task before timing out the gathering
        learn_task_timeout = 6000
        learn_task_ack_timeout = 60
        # ids must map to corresponding components
        persistor_id = "persistor"
        aggregator_id = "aggregator"
        shareable_generator_id = "shareable_generator"
        #learn_task_ack_timeout = 1000
        min_responses_required = 2
        wait_time_after_min_resps_received = 180
        learn_task_check_interval = 5.0
      }
    }
  }
  
]
task_result_filters = []
task_data_filters = []
components = [
     {
      id = "launcher"
      path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"
      args {
        script = "python3 custom/{app_script}  {app_config} "
        launch_once = true
      }
    }
    {
      id = "pipe"
      path = "nvflare.fuel.utils.pipe.file_pipe.FilePipe"
      args {
        mode = "PASSIVE"
        root_path = "{WORKSPACE}/{JOB_ID}/{SITE_NAME}"
      }
    }
    {
      id = "from_nvflare"
      path = "nvflare.app_opt.tf.params_converter.NumpyToKerasModelParamsConverter"
      args {}
    }
    {
      id = "to_nvflare"
      path = "nvflare.app_opt.tf.params_converter.KerasModelToNumpyParamsConverter"
      args {}
    }
  {
      id = "persistor"
      path = "model_persistor.TFModelPersistor"
      args {
        N=${N}
        model {
          
          path = "segmentation_models.Unet"
          args={
             backbone_name=resnet152, 
            encoder_weights=imagenet,
            classes=9,
            input_shape=[512,640,3]
          }
        }
        save_name = "tf_model.ckpt"
      }
    }
    {
      id = "shareable_generator"
      path = "nvflare.app_common.shareablegenerators.full_model_shareable_generator.FullModelShareableGenerator"
      args {}
    }
    {
      id = "aggregator"
      path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
      args {
        expected_data_kind = "WEIGHT_DIFF"
      }
    }
    {
      id = "metrics_pipe"
      path = "nvflare.fuel.utils.pipe.file_pipe.FilePipe"

      args {
        mode = "PASSIVE"
        # root_path: is the directory location of the parameters exchange.
        # You can also set it to an absolute path in your system.
        root_path = "{WORKSPACE}/{JOB_ID}/{SITE_NAME}"
      }
    }
    {
      id = "metric_relay"
      path = "nvflare.app_common.widgets.metric_relay.MetricRelay"
      args {
        pipe_id = "metrics_pipe"
        event_type = "analytix_log_stats"
        # how fast should it read from the peer
        read_interval = 0.1
        fed_event = False
      }
    }
    {
      # we use this component so the client api `flare.init()` can get required information
      id = "config_preparer"
      path = "nvflare.app_common.widgets.external_configurator.ExternalConfigurator"
      args {
        component_ids = ["metric_relay"]
      }
    }
]