"""Testing module for api predictions. This is a test file designed to use
pytest and prepared for some basic assertions and to add your own tests.

You can add new tests using the following structure:
```py
def test_{description for the test}(metadata):
    # Add your assertions inside the test function
    assert {statement_1 that returns true or false}
    assert {statement_2 that returns true or false}
```
The conftest.py module in the same directory includes the fixture to return
to your tests inside the argument variable `metadata` the value generated by
your function defined at `api.get_metadata`.

If your file grows in complexity, you can split it into multiple files in
the same folder. However, remember to add the prefix `test_` to the file.
"""
# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument
from pathlib import Path


def test_predictions_type(predictions):
    """Tests that predictions is dict type."""
    assert isinstance(predictions, dict)


def test_predictions_outputs(predictions, model_dir, input_file):
    """Tests that inference returns saved files."""

    # check a predictions subfolder was generated
    prediction_dir = Path(model_dir, "predictions")
    assert Path(prediction_dir).is_dir(), \
        f"Path to prediction folder {prediction_dir} " \
        "does not exist."

    # check the official "result" is a file, not an error
    result = predictions["result"]
    assert Path(result).is_file(), \
        f"Prediction output '{result}' " \
        "is not an existing file!"

    # check a .npy file with the original image name
    # also exists in the directory
    image_name = Path("data", input_file.filename)
    out_path = Path(prediction_dir, image_name)
    assert out_path.is_file(), \
        f"Prediction .npy file for input_file '{image_name}' " \
        f"does not exist at '{out_path}'."
